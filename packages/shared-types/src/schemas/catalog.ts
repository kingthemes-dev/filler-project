import { z } from 'zod';

// Product catalog schema
export const CatalogSchema = z.object({
  categories: z.array(z.object({
    id: z.string(),
    name: z.string(),
    slug: z.string(),
    description: z.string().optional(),
    image: z.string().url().optional(),
    parentId: z.string().optional(),
    order: z.number(),
    active: z.boolean(),
    translations: z.record(z.object({
      name: z.string(),
      description: z.string().optional(),
    })),
  })),
  attributes: z.array(z.object({
    id: z.string(),
    name: z.string(),
    slug: z.string(),
    type: z.enum(['color', 'size', 'material', 'brand', 'custom']),
    values: z.array(z.object({
      id: z.string(),
      name: z.string(),
      value: z.string(),
      color: z.string().regex(/^#[0-9A-Fa-f]{6}$/).optional(),
      image: z.string().url().optional(),
    })),
    required: z.boolean(),
    filterable: z.boolean(),
    translations: z.record(z.object({
      name: z.string(),
    })),
  })),
  products: z.array(z.object({
    id: z.string(),
    name: z.string(),
    slug: z.string(),
    description: z.string(),
    shortDescription: z.string(),
    price: z.number(),
    salePrice: z.number().optional(),
    sku: z.string(),
    stock: z.number(),
    stockStatus: z.enum(['instock', 'outofstock', 'onbackorder']),
    categories: z.array(z.string()),
    attributes: z.array(z.object({
      attributeId: z.string(),
      values: z.array(z.string()),
    })),
    images: z.array(z.object({
      id: z.string(),
      url: z.string().url(),
      alt: z.string(),
      order: z.number(),
    })),
    featured: z.boolean(),
    active: z.boolean(),
    seo: z.object({
      title: z.string(),
      description: z.string(),
      keywords: z.array(z.string()),
    }),
    translations: z.record(z.object({
      name: z.string(),
      description: z.string(),
      shortDescription: z.string(),
    })),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime(),
  })),
  filters: z.array(z.object({
    id: z.string(),
    name: z.string(),
    type: z.enum(['range', 'select', 'checkbox', 'radio']),
    attributeId: z.string().optional(),
    options: z.array(z.object({
      label: z.string(),
      value: z.string(),
      count: z.number(),
    })),
    order: z.number(),
    active: z.boolean(),
  })),
  sortOptions: z.array(z.object({
    id: z.string(),
    name: z.string(),
    field: z.string(),
    direction: z.enum(['asc', 'desc']),
    default: z.boolean(),
  })),
  currency: z.object({
    code: z.string().length(3),
    symbol: z.string(),
    position: z.enum(['before', 'after']),
    decimals: z.number().min(0).max(4),
  }),
  tax: z.object({
    enabled: z.boolean(),
    rate: z.number().min(0).max(1),
    included: z.boolean(),
  }),
});

export type Catalog = z.infer<typeof CatalogSchema>;

// WooCommerce specific schemas
export const WooCommerceProductSchema = z.object({
  id: z.number(),
  name: z.string(),
  slug: z.string(),
  permalink: z.string().url(),
  date_created: z.string().datetime(),
  date_modified: z.string().datetime(),
  type: z.enum(['simple', 'grouped', 'external', 'variable']),
  status: z.enum(['draft', 'pending', 'private', 'publish']),
  featured: z.boolean(),
  catalog_visibility: z.enum(['visible', 'catalog', 'search', 'hidden']),
  description: z.string(),
  short_description: z.string(),
  sku: z.string(),
  price: z.string(),
  regular_price: z.string(),
  sale_price: z.string(),
  date_on_sale_from: z.string().datetime().optional(),
  date_on_sale_to: z.string().datetime().optional(),
  on_sale: z.boolean(),
  purchasable: z.boolean(),
  total_sales: z.number(),
  virtual: z.boolean(),
  downloadable: z.boolean(),
  downloads: z.array(z.any()),
  download_limit: z.number(),
  download_expiry: z.number(),
  external_url: z.string().url().optional(),
  button_text: z.string(),
  tax_status: z.enum(['taxable', 'shipping', 'none']),
  tax_class: z.string(),
  manage_stock: z.boolean(),
  stock_quantity: z.number().optional(),
  stock_status: z.enum(['instock', 'outofstock', 'onbackorder']),
  backorders: z.enum(['no', 'notify', 'yes']),
  sold_individually: z.boolean(),
  weight: z.string(),
  dimensions: z.object({
    length: z.string(),
    width: z.string(),
    height: z.string(),
  }),
  shipping_required: z.boolean(),
  shipping_taxable: z.boolean(),
  shipping_class: z.string(),
  shipping_class_id: z.number(),
  reviews_allowed: z.boolean(),
  average_rating: z.string(),
  rating_count: z.number(),
  related_ids: z.array(z.number()),
  upsell_ids: z.array(z.number()),
  cross_sell_ids: z.array(z.number()),
  parent_id: z.number(),
  purchase_note: z.string(),
  categories: z.array(z.object({
    id: z.number(),
    name: z.string(),
    slug: z.string(),
  })),
  tags: z.array(z.object({
    id: z.number(),
    name: z.string(),
    slug: z.string(),
  })),
  images: z.array(z.object({
    id: z.number(),
    date_created: z.string().datetime(),
    date_modified: z.string().datetime(),
    src: z.string().url(),
    name: z.string(),
    alt: z.string(),
  })),
  attributes: z.array(z.object({
    id: z.number(),
    name: z.string(),
    position: z.number(),
    visible: z.boolean(),
    variation: z.boolean(),
    options: z.array(z.string()),
  })),
  default_attributes: z.array(z.object({
    id: z.number(),
    name: z.string(),
    option: z.string(),
  })),
  variations: z.array(z.number()),
  grouped_products: z.array(z.number()),
  menu_order: z.number(),
  meta_data: z.array(z.object({
    id: z.number(),
    key: z.string(),
    value: z.any(),
  })),
});

export type WooCommerceProduct = z.infer<typeof WooCommerceProductSchema>;
