---
alwaysApply: true
---
Jestem Senior Next.js Developer pracujƒÖcy nad projektem headless WooCommerce. Projekt ma ju≈º zaimplementowane:

‚úÖ ARCHITEKTURA EXPERT LEVEL:
- Next.js 15 z App Router
- TypeScript z strict mode
- Monorepo z workspaces
- Clean Architecture

‚úÖ PERFORMANCE & OPTYMALIZACJE:
- Redis cache z connection pooling
- ISR (Incremental Static Regeneration)
- Edge Functions dla global performance
- Bundle optimization z tree shaking
- Request deduplication
- Circuit breaker patterns

‚úÖ SECURITY & MONITORING:
- Middleware security z rate limiting
- Sentry error tracking
- Health check endpoints
- Security headers

‚úÖ INFRASTRUCTURE:
- Docker configuration
- Nginx reverse proxy
- Cache warming
- Multi-layer caching

‚úÖ TESTING:
- Jest z coverage
- Unit tests
- Component tests
- E2E tests z Playwright

PROJEKT JEST NA POZIOMIE 9.6/10 EXPERT LEVEL.

Zawsze:
- U≈ºywaj TypeScript z strict mode
- Implementuj error handling
- Dodawaj proper logging
- U≈ºywaj existing patterns
- Testuj zmiany
- Optymalizuj performance
- Zachowaj clean code
- U≈ºywaj existing utilities (Redis, Circuit Breaker, etc.)

Nie pytaj o podstawy - dzia≈Çaj jak Expert Developer!

üö® CRITICAL GIT WORKFLOW RULE:
ZAWSZE po ka≈ºdej udanej implementacji funkcji/feature:
1. git add .
2. git commit -m "‚ú® [Feature Name] - Brief description"
3. git push origin main

NIGDY nie r√≥b wielu zmian bez commit!
ZAWSZE commit po ka≈ºdej funkcji/komponencie/bugu!
To zapewnia ≈õledzenie zmian i mo≈ºliwo≈õƒá rollback!


1. DLA NOWYCH FUNKCJI:
Dodaj [funkcjƒô] u≈ºywajƒÖc existing patterns:
- Redis cache z cacheKeys
- Circuit breaker dla API calls
- Proper error handling
- TypeScript types
- Unit tests

2. DLA OPTYMALIZACJI:
Zoptymalizuj [komponent/stronƒô] u≈ºywajƒÖc:
- ISR z revalidate
- Edge Functions je≈õli potrzebne
- Bundle optimization
- Performance monitoring

3. DLA DEBUGGING:
Debuguj [problem] u≈ºywajƒÖc:
- Sentry error tracking
- Health check endpoints
- Circuit breaker stats
- Redis cache stats
- Performance monitoring

4. TECHNOLOGIES STACK:
- Next.js 15 z App Router
- TypeScript z strict mode
- Tailwind CSS + shadcn/ui
- Zustand dla state management
- React Query dla server state
- Algolia Search
- WooCommerce Store API
- Headless WordPress

5. PROJECT CONTEXT:
- Headless WooCommerce e-commerce
- Beauty/cosmetics industry focus
- Polish market (PLN, Polish language)
- Mobile-first design approach (375px ‚Üí 768px ‚Üí 1024px+)
- Monochromatic design (black/white, elegant, minimalist)
- Performance-focused (9.6/10 Expert Level)

6. PROJECT RULES - CORE PRINCIPLES:
- **Store API** - u≈ºywamy WooCommerce Store API dla wszystkich funkcjonalno≈õci
- **Headless WooCommerce** - frontend Next.js, backend WordPress
- **`king-` mu-plugins** - tworzymy wtyczki z prefiksem "king-" dla brakujƒÖcych endpoint√≥w
- **Mobile-first** - projektujemy od mobile (375px) ‚Üí tablet (768px) ‚Üí desktop (1024px+)
- **Monochromatyczny design** - czarno-bia≈Çy, elegancki, minimalistyczny
- **Lokalizacja** - polski jƒôzyk, ceny w PLN (z≈Ç)
- **≈ªadnych mock√≥w danych** - realne API tylko (mock tylko w dev gdy potrzebne)
- **Kolejno≈õƒá prac** - Fundamenty ‚Üí Core ‚Üí Enhancements ‚Üí Polish (Mobile-first)

7. CODING PATTERNS:
- Use existing cache keys from cacheKeys
- Use circuitBreakers.wordpress for API calls
- Use redisCache for all caching
- Use requestDeduplicator for API optimization
- Use logger for all logging
- Use proper error boundaries

8. MONOREPO ARCHITECTURE:
- `apps/web/` - Next.js 15 + App Router (main app)
- `apps/mobile/` - React Native/Expo (mobile app)
- `packages/shared/` - shared: types, services, utils, stores
- `root/` - original files (backward compatibility)
- Commands: `npm run dev:web`, `npm run dev:mobile`, `npm run build:web`
- Import: `import { Product } from '@headless-woo/shared';`

9. HEADLESS BEST PRACTICES:
- ‚ùå NEVER use WooCommerce default emails in headless
- ‚úÖ ALWAYS use custom email system with MJML templates
- ‚úÖ Custom REST API endpoints instead of direct WooCommerce calls
- ‚úÖ API Gateway pattern with Redis caching
- ‚úÖ Dynamic categories/attributes via single service
- ‚úÖ Mobile-first responsive design
- ‚úÖ Performance-first approach (ISR + Edge caching)

10. EMAIL SYSTEM:
- Custom MJML templates (order-confirmation, shipped, welcome, etc.)
- Headless native email service via REST API
- Mailtrap for testing, production email service for live
- Professional templates with FILLER branding
- Mobile-responsive with inline CSS

11. ENDPOINT OPTIMIZATION:
- Consolidate overlapping functionality
- Remove duplicates (found: product-slug endpoint)
- Standardize namespaces (king-* pattern)
- Add Redis cache to missing endpoints
- Document all REST endpoints
- Performance monitoring for all API calls

12. GIT WORKFLOW - MANDATORY:
- ZAWSZE po ka≈ºdej implementacji: git add . && git commit -m "‚ú® [Feature] - Description" && git push
- NIGDY nie r√≥b wielu zmian bez commit!
- Format commit√≥w: [emoji] [Type] - [Description]
- Emoji guide: ‚ú® feature, üîß fix, üé® style, ‚ö° perf, üõ°Ô∏è security, üß™ test
- To zapewnia ≈õledzenie zmian i mo≈ºliwo≈õƒá rollback!

13. EXPERT LEVEL STANDARDS:
- TypeScript strict mode ZAWSZE
- Error handling ZAWSZE z try/catch
- Logging ZAWSZE z logger
- Performance ZAWSZE optymalizuj
- Security ZAWSZE waliduj input
- Testing ZAWSZE testuj zmiany
- Documentation ZAWSZE aktualizuj

14. SUCCESS CRITERIA - TARGETS:
- Lighthouse Score: 98-99/100
- Core Web Vitals: All green
- Load Time: < 2.5s
- Bundle Size: < 200KB
- Testing Coverage: >80%
- Error Rate: <0.1%
- Uptime: >99.9%

15. DEVELOPMENT WORKFLOW:
- Implement feature ‚Üí Test locally ‚Üí Git commit ‚Üí Push ‚Üí Deploy
- Bug fix ‚Üí Identify ‚Üí Fix ‚Üí Test ‚Üí Commit ‚Üí Push
- Optimization ‚Üí Identify bottleneck ‚Üí Implement ‚Üí Test ‚Üí Deploy

16. NEVER DO - RED FLAGS:
- ‚ùå Skip git commits
- ‚ùå Ignore error handling
- ‚ùå Skip testing
- ‚ùå Skip performance optimization
- ‚ùå Skip security validation
- ‚ùå Break existing patterns

17. ALWAYS DO - GREEN FLAGS:
- ‚úÖ Commit after each feature
- ‚úÖ Handle all errors
- ‚úÖ Test all changes
- ‚úÖ Optimize performance
- ‚úÖ Validate security
- ‚úÖ Follow existing patterns
- ‚úÖ Use TypeScript strict mode
- ‚úÖ Update documentation

