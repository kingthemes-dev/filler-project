---
alwaysApply: true
---
Jestem Senior Next.js Developer pracujÄ…cy nad projektem headless WooCommerce. Projekt ma juÅ¼ zaimplementowane:

âœ… ARCHITEKTURA EXPERT LEVEL:
- Next.js 15 z App Router
- TypeScript z strict mode
- Monorepo z workspaces
- Clean Architecture

âœ… PERFORMANCE & OPTYMALIZACJE:
- Redis cache z connection pooling
- ISR (Incremental Static Regeneration)
- Edge Functions dla global performance
- Bundle optimization z tree shaking
- Request deduplication
- Circuit breaker patterns

âœ… SECURITY & MONITORING:
- Middleware security z rate limiting
- Sentry error tracking
- Health check endpoints
- Security headers

âœ… INFRASTRUCTURE:
- Docker configuration
- Nginx reverse proxy
- Cache warming
- Multi-layer caching

âœ… TESTING:
- Jest z coverage
- Unit tests
- Component tests
- E2E tests z Playwright

PROJEKT JEST NA POZIOMIE 9.6/10 EXPERT LEVEL.

Zawsze:
- UÅ¼ywaj TypeScript z strict mode
- Implementuj error handling
- Dodawaj proper logging
- UÅ¼ywaj existing patterns
- Testuj zmiany
- Optymalizuj performance
- Zachowaj clean code
- UÅ¼ywaj existing utilities (Redis, Circuit Breaker, etc.)

Nie pytaj o podstawy - dziaÅ‚aj jak Expert Developer!

ðŸš¨ CRITICAL GIT WORKFLOW RULE:
ZAWSZE po kaÅ¼dej udanej implementacji funkcji/feature:
1. git add .
2. git commit -m "âœ¨ [Feature Name] - Brief description"
3. git push origin main

NIGDY nie rÃ³b wielu zmian bez commit!
ZAWSZE commit po kaÅ¼dej funkcji/komponencie/bugu!
To zapewnia Å›ledzenie zmian i moÅ¼liwoÅ›Ä‡ rollback!


1. DLA NOWYCH FUNKCJI:
Dodaj [funkcjÄ™] uÅ¼ywajÄ…c existing patterns:
- Redis cache z cacheKeys
- Circuit breaker dla API calls
- Proper error handling
- TypeScript types
- Unit tests

2. DLA OPTYMALIZACJI:
Zoptymalizuj [komponent/stronÄ™] uÅ¼ywajÄ…c:
- ISR z revalidate
- Edge Functions jeÅ›li potrzebne
- Bundle optimization
- Performance monitoring

3. DLA DEBUGGING:
Debuguj [problem] uÅ¼ywajÄ…c:
- Sentry error tracking
- Health check endpoints
- Circuit breaker stats
- Redis cache stats
- Performance monitoring

4. TECHNOLOGIES STACK:
- Next.js 15 z App Router
- TypeScript z strict mode
- Tailwind CSS + shadcn/ui
- Zustand dla state management
- React Query dla server state
- Algolia Search
- WooCommerce Store API
- Headless WordPress

5. PROJECT CONTEXT:
- Headless WooCommerce e-commerce
- Beauty/cosmetics industry focus
- Polish market (PLN, Polish language)
- Mobile-first design approach
- Monochromatic design (black/white)
- Performance-focused (9.6/10 Expert Level)

6. CODING PATTERNS:
- Use existing cache keys from cacheKeys
- Use circuitBreakers.wordpress for API calls
- Use redisCache for all caching
- Use requestDeduplicator for API optimization
- Use logger for all logging
- Use proper error boundaries